def font_transform(filename : str):
    nonascii_list = ['-', '+', '~', '.']

    fn : list = filename.split('.')
    global fn_noext
    fn_noext = str()
    for i in range(0, len(fn) - 1):
        if not fn_noext == "":
            fn_noext += '.'
        fn_noext += fn[i]
    for each in nonascii_list:
        fn_noext = fn_noext.replace(each, '_')
    fn_noext = fn_noext[0].upper() + fn_noext[1:]
    
    fonts_linked = []
    try:
        fonts_linkedfile = open("fonts_linked.list", "r")
        fonts_linked = fonts_linkedfile.readlines()
        fonts_linkedfile.close()
    except:
        fonts_linked = []
    if not (fn_noext + ".c\n") in fonts_linked:
        result_dir = "src/assets_gen/fonts/"
        byte_file : IO = open("assets/fonts/" + filename, "rb")
        code_file : IO = open(result_dir + fn_noext + ".c", "w")
        code_file.write("#include \"fonts.h\"\n\n#include <stdlib.h>\n\n")
        code_file.write("// This file is generated by WAF, the build system of Sunrayz.\n// Do not touch with bare hands.\n\n")
        code_file.write("static unsigned char font[] = {")
        byte_counter : int = 0
        for each in byte_file.read():
            if byte_counter % 12 == 0:
                code_file.write("\n\t")
            else:
                code_file.write(' ')
            code_file.write(hex(each) + ',')
            byte_counter += 1
        code_file.write("\n};\n\nunsigned char* GetFont" + fn_noext + "()\n{\n\treturn font;\n};\n")
        code_file.write("\nunsigned long GetFont" + fn_noext + "Size() {\n\treturn " + str(byte_counter) + ";\n};\n")
        byte_file.close()
        code_file.close()

        #gitignore_dump = str()
        #with open(".gitignore", "r") as gitignore:
        #    gitignore_dump = gitignore.read()
        #with open(".gitignore", "w") as gitignore:
        #    gitignore.write(gitignore_dump)
        #    gitignore.write(result_dir + fn_noext + ".c\n")

        fonts_h_dump = str()
        try:
            with open(result_dir + "fonts.h", "r") as fonts_h:
                fonts_h_dump = fonts_h.read()
        except:
            fonts_h_dump = ""
        with open(result_dir + "fonts.h", "w") as fonts_h:
            fonts_h.write(fonts_h_dump)
            fonts_h.write("\n// " + fn_noext + ".c\n")
            fonts_h.write("unsigned char* GetFont" + fn_noext + "();\n")
            fonts_h.write("unsigned long GetFont" + fn_noext + "Size();\n")
    
        fonts_linked_dump = str()
        try:
            with open("fonts_linked.list", "r") as fonts_linked:
                fonts_linked_dump = fonts_linked.read()
        except:
            fonts_linked_dump = ""
        with open("fonts_linked.list", "w") as fonts_linked:
            fonts_linked.write(fonts_linked_dump)
            fonts_linked.write(fn_noext + ".c\n")
